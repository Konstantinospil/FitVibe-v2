name: CI

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/fitvibe-backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/fitvibe-frontend

jobs:
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint:check

      - name: Type check
        run: pnpm typecheck

      - name: Unit tests & coverage
        run: pnpm test -- --coverage --runInBand

      - name: Verify feature flag defaults
        run: node tests/qa/check-feature-flags.js

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          if-no-files-found: ignore

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          flags: unit

      - name: Build workspace
        run: pnpm build

  openapi_spec:
    name: Build OpenAPI spec
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate OpenAPI JSON
        run: pnpm -w openapi:build

      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi
          path: apps/backend/openapi/openapi.json
          if-no-files-found: error

  integration:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: fitvibe
          POSTGRES_USER: fitvibe
          POSTGRES_PASSWORD: fitvibe
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U fitvibe -d fitvibe"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql://fitvibe:fitvibe@127.0.0.1:5432/fitvibe
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        run: pnpm --filter @fitvibe/backend exec tsx src/db/utils/migrateAll.ts

      - name: Seed database
        run: pnpm --filter @fitvibe/backend exec tsx src/db/utils/seedAll.ts

      - name: Integration tests
        env:
          NODE_ENV: test
        run: pnpm --filter @fitvibe/backend exec jest --runInBand

  metrics_contract:
    name: Metrics Contract
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate metrics exposure
        run: node tests/metrics/assert-prom.js

  security:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Dependency audit (fail on high severity)
        run: pnpm audit --prod --audit-level=high

      - name: Snyk scan
        if: ${{ env.SNYK_TOKEN != '' }}
        uses: snyk/actions/node@master
        with:
          command: test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Secret scan
        uses: trufflesecurity/trufflehog@3.63.3
        with:
          scan_secrets: true

      - name: Container vulnerability scan
        uses: aquasecurity/trivy-action@0.22.0
        with:
          scan-type: fs
          scan-ref: .
          format: table
          severity: HIGH,CRITICAL
          exit-code: 1
          ignore-unfixed: true

  zap_baseline:
    name: OWASP ZAP Baseline
    runs-on: ubuntu-latest
    needs: security
    env:
      ZAP_TARGET_URL: ${{ secrets.ZAP_TARGET_URL }}
    if: ${{ secrets.ZAP_TARGET_URL != '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run ZAP baseline scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ secrets.ZAP_TARGET_URL }}
          rules_file_name: .zap/rules.tsv
          cmd_options: -a -I

  performance:
    name: Performance Budgets
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install k6
        uses: k6io/setup-k6@v0.2.0

      - name: Start mock services
        run: |
          node tests/perf/mock-server.mjs &
          echo $! > mock-server.pid
          for i in {1..20}; do
            if curl -fsS http://127.0.0.1:4173/health >/dev/null; then
              exit 0
            fi
            sleep 3
          done
          echo "Mock server did not start in time" >&2
          exit 1

      - name: Run k6 smoke test
        env:
          API_BASE_URL: http://127.0.0.1:4173/health
        run: k6 run --summary-export=tests/perf/k6-summary.json tests/perf/k6-smoke.js

      - name: Assert k6 performance budgets
        run: node tests/perf/assert-budgets.js tests/perf/k6-summary.json

      - name: Run Lighthouse CI
        env:
          LHCI_PORT: "4173"
        run: pnpm exec lhci autorun --config=tests/perf/lighthouserc.json --exit-on-error

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: perf-metrics
          path: |
            tests/perf/k6-summary.json
            tests/perf/lhci-output
          if-no-files-found: error

      - name: Stop mock services
        if: always()
        run: |
          if [ -f mock-server.pid ]; then
            kill "$(cat mock-server.pid)" 2>/dev/null || true
            rm -f mock-server.pid
          fi

  e2e:
    name: E2E Playwright
    runs-on: ubuntu-latest
    needs: integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install project dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright test runner
        run: npm install -g @playwright/test@1.48.2

      - name: Expose global node modules
        run: echo "NODE_PATH=$(npm root -g)" >> "$GITHUB_ENV"

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build frontend
        run: pnpm --filter @fitvibe/frontend exec pnpm run build

      - name: Run Playwright smoke tests
        run: npx playwright test --config tests/frontend/e2e/playwright.config.js --reporter=line

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report
            test-results
          if-no-files-found: ignore

  build:
    name: Build & Publish Images
    runs-on: ubuntu-latest
    needs:
      - quality
      - integration
      - metrics_contract
      - performance
      - security
      - openapi_spec
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine package versions
        id: versions
        run: |
          echo "backend=$(node -p \"require('./apps/backend/package.json').version\")" >> "$GITHUB_OUTPUT"
          echo "frontend=$(node -p \"require('./apps/frontend/package.json').version\")" >> "$GITHUB_OUTPUT"

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        id: backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/docker/prod/Dockerfile.backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:sha-${{ github.sha }}
            ${{ env.BACKEND_IMAGE }}:v${{ steps.versions.outputs.backend }}
          provenance: true
          sbom: false

      - name: Build and push frontend image
        id: frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/docker/prod/Dockerfile.frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:sha-${{ github.sha }}
            ${{ env.FRONTEND_IMAGE }}:v${{ steps.versions.outputs.frontend }}
          provenance: true
          sbom: false

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign backend image
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign sign --yes --keyless ${{ env.BACKEND_IMAGE }}@${{ steps.backend.outputs.digest }}

      - name: Sign frontend image
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign sign --yes --keyless ${{ env.FRONTEND_IMAGE }}@${{ steps.frontend.outputs.digest }}

      - name: Generate backend SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.BACKEND_IMAGE }}@${{ steps.backend.outputs.digest }}
          output-file: sbom-backend.spdx.json

      - name: Generate frontend SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.FRONTEND_IMAGE }}@${{ steps.frontend.outputs.digest }}
          output-file: sbom-frontend.spdx.json

      - name: Record image digests
        run: |
          printf "backend=%s@%s\nfrontend=%s@%s\n" \
            "${{ env.BACKEND_IMAGE }}" "${{ steps.backend.outputs.digest }}" \
            "${{ env.FRONTEND_IMAGE }}" "${{ steps.frontend.outputs.digest }}" > image-digests.txt
      - name: Download OpenAPI artifact
        uses: actions/download-artifact@v4
        with:
          name: openapi
          path: artifacts/openapi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-artifacts
          path: |
            sbom-backend.spdx.json
            sbom-frontend.spdx.json
            image-digests.txt
            artifacts/openapi/openapi.json
          if-no-files-found: error
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.versions.outputs.backend }}
          name: Release v${{ steps.versions.outputs.backend }}
          body: |
            - Backend image: ${{ env.BACKEND_IMAGE }}:v${{ steps.versions.outputs.backend }}
            - Frontend image: ${{ env.FRONTEND_IMAGE }}:v${{ steps.versions.outputs.frontend }}
          draft: false
          prerelease: false
          artifacts: container-artifacts
          token: ${{ secrets.GITHUB_TOKEN }} # Using the repo token to upload artifacts
