name: CD Staging

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push' &&
      github.event.workflow_run.head_branch == 'main'
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Checkout revision
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Download container artifacts
        uses: actions/download-artifact@v4
        with:
          name: container-artifacts
          path: artifacts
          run-id: ${{ github.event.workflow_run.id }}

      - name: Parse image digests
        id: images
        shell: bash
        run: |
          backend=$(grep '^backend=' artifacts/image-digests.txt | cut -d= -f2)
          frontend=$(grep '^frontend=' artifacts/image-digests.txt | cut -d= -f2)
          if [[ -z "$backend" || -z "$frontend" ]]; then
            echo "Image digests missing from artifact." >&2
            exit 1
          fi
          echo "backend_image=$backend" >> "$GITHUB_OUTPUT"
          echo "frontend_image=$frontend" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Verify backend signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign verify --keyless ${{ steps.images.outputs.backend_image }}

      - name: Verify frontend signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign verify --keyless ${{ steps.images.outputs.frontend_image }}

      - name: Determine release version
        id: version
        run: echo "value=$(node -p \"require('./apps/backend/package.json').version\")" >> "$GITHUB_OUTPUT"

      - name: Deploy stack
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          envs: BACKEND_IMAGE,FRONTEND_IMAGE,STACK_VERSION
          script: |
            set -eo pipefail

            cd ~/fitvibe

            export BACKEND_IMAGE="${BACKEND_IMAGE}"
            export FRONTEND_IMAGE="${FRONTEND_IMAGE}"
            export STACK_VERSION="${STACK_VERSION}"

            compose="docker compose -f infra/docker/staging/docker-compose.staging.yml"

            deploy_stack() {
              $compose pull backend frontend
              $compose up -d --remove-orphans
              $compose exec -T backend node dist/db/utils/migrateAll.js
              $compose exec -T backend node dist/db/utils/postDeploy.js
              $compose exec -T backend node dist/db/utils/verifyIntegrity.js
              curl -fsS http://127.0.0.1:4100/health
              curl -fsS http://127.0.0.1:4100/metrics
            }

            deploy_stack
        env:
          BACKEND_IMAGE: ${{ steps.images.outputs.backend_image }}
          FRONTEND_IMAGE: ${{ steps.images.outputs.frontend_image }}
          STACK_VERSION: v${{ steps.version.outputs.value }}
