================================================================================
FITVIBE V2 - SECRETS MANAGEMENT & ROTATION PROTOCOL
================================================================================

Document ID: PROTO-001
Version: 1.0
Last Updated: 2025-10-28
Owner: DevOps/Security Team
Related Task: I-12 (Secrets manager integration for staging/prod)
Related ADR: ADR-002 (Authentication Token Strategy)
Reference: TDD Sections 10.6 & 13.7, CLAUDE.md

================================================================================
1. OVERVIEW
================================================================================

This protocol defines the operational procedures for managing secrets in the
FitVibe V2 platform using HashiCorp Vault. It covers:

- Secrets storage and retrieval
- JWT signing key rotation
- Emergency procedures
- Monitoring and alerting
- Troubleshooting

SCOPE:
- Staging and Production environments only
- Development uses file-based keys (no Vault required)

SECRETS MANAGED:
- JWT signing keys (RSA-4096 private/public key pairs)
- Database credentials (future)
- API keys and tokens (future)
- Third-party service credentials (future)

================================================================================
2. ARCHITECTURE
================================================================================

COMPONENTS:
┌─────────────────┐      ┌──────────────┐      ┌────────────────┐
│  FitVibe Backend│─────▶│ Secrets      │─────▶│  HashiCorp     │
│  (Node.js)      │      │ Service      │      │  Vault         │
└─────────────────┘      └──────────────┘      └────────────────┘
        │                       │
        │                       ├─ getSecret()
        │                       ├─ writeSecret()
        │                       ├─ checkSecretsHealth()
        └─ Fallback: env vars  └─ getJWTKeys()

FILES:
- apps/backend/src/services/secrets.service.ts  (Secrets abstraction layer)
- apps/backend/src/db/scripts/rotate-secrets.ts (Rotation script)
- apps/backend/src/config/env.ts                (Configuration)
- apps/backend/src/server.ts                    (Bootstrap initialization)

VAULT PATHS:
- secret/jwt           → JWT signing keys (private, public, kid, metadata)
- secret/database      → Database credentials (future)
- secret/third-party/* → External service credentials (future)

================================================================================
3. CONFIGURATION
================================================================================

3.1 ENVIRONMENT VARIABLES
--------------------------

Required for Vault integration:

VAULT_ENABLED=true                        # Enable Vault integration
VAULT_ADDR=https://vault.example.com:8200 # Vault server address
VAULT_TOKEN=hvs.XXXXXXXXXXXXXXXXXXXX      # Vault authentication token
VAULT_NAMESPACE=fitvibe                   # Optional: Vault namespace
JWT_KEY_ROTATION_DAYS=90                  # Rotation policy (default: 90 days)

Optional (development only):

VAULT_ENABLED=false                       # Use file-based keys
JWT_PRIVATE_KEY_PATH=./keys/jwt_rs256.key
JWT_PUBLIC_KEY_PATH=./keys/jwt_rs256.pub

3.2 VAULT TOKEN REQUIREMENTS
-----------------------------

The Vault token must have the following capabilities:

Path: secret/jwt
Capabilities: ["create", "read", "update", "list"]

Path: secret/data/jwt (KV v2)
Capabilities: ["create", "read", "update", "list"]

Example Vault policy:

path "secret/jwt" {
  capabilities = ["create", "read", "update", "list"]
}

path "secret/data/jwt" {
  capabilities = ["create", "read", "update", "list"]
}

3.3 VAULT TOKEN ROTATION
-------------------------

Vault tokens should be rotated regularly:

1. Generate new token with same policy
2. Update VAULT_TOKEN in environment
3. Restart backend application
4. Revoke old token after verification

FREQUENCY: Every 90 days (aligned with JWT key rotation)

================================================================================
4. JWT KEY ROTATION PROCEDURES
================================================================================

4.1 AUTOMATED ROTATION (RECOMMENDED)
-------------------------------------

FREQUENCY: Weekly check (Sunday 00:00 UTC)

Setup cron job or CI/CD scheduled pipeline:

# Crontab example
0 0 * * 0 cd /app && pnpm secrets:rotate

The script will:
- Check current key expiration date
- Rotate only if within 14 days of expiry
- Generate new RSA-4096 key pair
- Store in Vault with metadata
- Verify successful write
- Log rotation event

4.2 MANUAL ROTATION (EMERGENCY)
--------------------------------

WHEN: Security incident, key compromise, or forced rotation

COMMAND:
pnpm secrets:rotate --force

STEPS:
1. Ensure Vault is accessible:
   curl -H "X-Vault-Token: $VAULT_TOKEN" $VAULT_ADDR/v1/sys/health

2. Run rotation with force flag:
   cd /path/to/fitvibe
   pnpm secrets:rotate --force

3. Verify rotation success in logs:
   [rotate-secrets] Keys rotated successfully

4. Restart backend application:
   systemctl restart fitvibe-backend  (or equivalent)

5. Verify new keys loaded:
   curl http://localhost:4000/.well-known/jwks.json
   # Check "kid" field matches new key ID

6. Monitor for authentication errors

7. Document incident and rotation in runbook

ROLLBACK:
If rotation fails, backend falls back to existing keys in Vault or env vars.

4.3 ROTATION SCHEDULE
---------------------

POLICY: Quarterly rotation (90 days) per ADR-002

TIMELINE:
Day 0   : Key generated and stored in Vault
Day 76  : 14-day warning window opens
Day 76-90: Automated rotation eligible
Day 90  : Key expiration (rotation should be complete)
Day 91+ : ALERT - Overdue rotation

OVERLAP WINDOW:
During rotation, old tokens remain valid for 24 hours (grace period)
to prevent service disruption.

================================================================================
5. OPERATIONAL RUNBOOKS
================================================================================

5.1 INITIAL VAULT SETUP (ONE-TIME)
-----------------------------------

PREREQUISITES:
- Vault server installed and unsealed
- Admin access to Vault

STEPS:

1. Enable KV secrets engine:
   vault secrets enable -version=2 -path=secret kv

2. Create policy for FitVibe:
   vault policy write fitvibe-backend - <<EOF
   path "secret/data/jwt" {
     capabilities = ["create", "read", "update", "list"]
   }
   path "secret/data/database" {
     capabilities = ["read", "list"]
   }
   EOF

3. Generate token for backend:
   vault token create -policy=fitvibe-backend -period=90d

4. Store token securely (password manager, secrets manager)

5. Generate initial JWT keys:
   VAULT_ENABLED=true VAULT_TOKEN=<token> pnpm secrets:rotate --force

6. Verify keys stored:
   vault kv get secret/jwt

7. Update environment configuration:
   - Set VAULT_ENABLED=true
   - Set VAULT_TOKEN=<token>
   - Set VAULT_ADDR=<vault-url>

8. Deploy backend with new configuration

5.2 HEALTH CHECKS
-----------------

CHECK: Vault connectivity
COMMAND: curl -H "X-Vault-Token: $VAULT_TOKEN" $VAULT_ADDR/v1/sys/health
EXPECTED: HTTP 200, {"sealed":false,"initialized":true}

CHECK: Secrets accessible
COMMAND: curl -H "X-Vault-Token: $VAULT_TOKEN" $VAULT_ADDR/v1/secret/data/jwt
EXPECTED: HTTP 200, {"data":{"data":{"private":"-----BEGIN...",...}}}

CHECK: Backend secrets health
COMMAND: Check logs for "[secrets] Vault client initialized"
EXPECTED: Log entry on startup

CHECK: JWT keys loaded
COMMAND: curl http://localhost:4000/.well-known/jwks.json
EXPECTED: {"keys":[{"kty":"RSA","use":"sig","alg":"RS256",...}]}

5.3 MONITORING & ALERTS
-----------------------

METRICS TO MONITOR:
- Vault availability (uptime, latency)
- Secret read failures (error rate)
- Key rotation status (last rotation date)
- Key expiration warnings (days until expiry)
- Backend authentication failures (may indicate key issues)

ALERT RULES:

CRITICAL:
- Vault unreachable for > 5 minutes
- JWT keys expired (Day 90+)
- Secret read failures > 5% over 5 minutes

WARNING:
- JWT keys expiring within 14 days
- Vault token expiring within 14 days
- Secret read latency > 500ms

INFO:
- Successful key rotation
- Vault token rotated

ALERT CHANNELS:
- PagerDuty (critical)
- Slack #ops-alerts (warning/info)
- Email ops@fitvibe.com (all)

5.4 TROUBLESHOOTING
-------------------

PROBLEM: Backend fails to start with Vault error
SYMPTOMS: Log shows "[server] VAULT_ENABLED=true but VAULT_TOKEN is not set"
SOLUTION:
  1. Check VAULT_TOKEN is set in environment
  2. Verify token is valid: vault token lookup
  3. If expired, generate new token and update env

PROBLEM: Rotation script fails with "Vault health check failed"
SYMPTOMS: Error "[rotate-secrets] Vault health check failed"
SOLUTION:
  1. Check Vault is running: systemctl status vault
  2. Check Vault is unsealed: vault status
  3. Verify VAULT_ADDR is correct
  4. Check network connectivity to Vault
  5. Verify VAULT_TOKEN has not expired

PROBLEM: Authentication failures after rotation
SYMPTOMS: Users getting 401 errors, "Invalid token signature"
SOLUTION:
  1. Check backend restarted after rotation
  2. Verify new keys loaded: GET /.well-known/jwks.json
  3. Check "kid" in JWT header matches JWKS
  4. If mismatch, restart backend to reload keys
  5. If persistent, rollback to previous keys (manual restore from Vault)

PROBLEM: Rotation script says "Keys still valid - rotation not needed"
SYMPTOMS: Script exits without rotating, but you need to force rotation
SOLUTION:
  1. Use --force flag: pnpm secrets:rotate --force
  2. This bypasses expiration check and forces immediate rotation

PROBLEM: "AWS Secrets Manager write not yet implemented" error
SYMPTOMS: Error when trying to write to AWS Secrets Manager
SOLUTION:
  This is expected - AWS write functionality is not implemented per I-12.
  Use Vault instead (VAULT_ENABLED=true).

================================================================================
6. SECURITY CONSIDERATIONS
================================================================================

6.1 VAULT TOKEN SECURITY
-------------------------

DO:
✓ Store Vault tokens in secure secrets management (not in code/git)
✓ Use short-lived tokens (90 days max)
✓ Rotate tokens regularly (quarterly)
✓ Use different tokens per environment
✓ Restrict token capabilities to minimum required
✓ Enable token renewal if available
✓ Audit token access logs

DON'T:
✗ Commit Vault tokens to version control
✗ Share tokens across environments
✗ Use root tokens in production
✗ Store tokens in plaintext config files
✗ Reuse tokens across applications
✗ Set unlimited token TTL

6.2 KEY ROTATION SECURITY
--------------------------

BEST PRACTICES:
- Rotate keys quarterly (90 days) minimum
- Use 4096-bit RSA keys (2048-bit is minimum)
- Generate keys server-side (never client-side)
- Store private keys encrypted at rest
- Never log or transmit private keys
- Verify key integrity after rotation
- Maintain audit trail of all rotations
- Test rotation in staging before production

6.3 INCIDENT RESPONSE
----------------------

IF KEY COMPROMISE SUSPECTED:

IMMEDIATE (< 1 hour):
1. Rotate JWT keys immediately: pnpm secrets:rotate --force
2. Restart backend to load new keys
3. Revoke all active user sessions (force re-login)
4. Alert security team

SHORT-TERM (< 24 hours):
5. Audit access logs for suspicious activity
6. Review authentication logs for unauthorized access
7. Generate new Vault token and rotate
8. Document incident timeline and impact
9. Notify affected users if data accessed

LONG-TERM (< 7 days):
10. Root cause analysis
11. Update security procedures if needed
12. Implement additional controls (2FA, rate limits, etc.)
13. Schedule post-mortem review

6.4 COMPLIANCE
--------------

GDPR:
- Secrets containing PII must be encrypted at rest
- Access to secrets must be logged and auditable
- Secrets must be deleted upon user data deletion request
- Secrets retention aligns with data retention policy (24 months)

SOC 2:
- Secrets access requires authentication and authorization
- Secrets changes are logged and auditable
- Separation of duties (dev cannot access prod secrets)
- Regular key rotation per policy
- Secrets backup and disaster recovery tested quarterly

================================================================================
7. DISASTER RECOVERY
================================================================================

7.1 VAULT FAILURE
-----------------

SCENARIO: Vault becomes unavailable

IMMEDIATE MITIGATION:
1. Backend falls back to environment variables (if configured)
2. Check env vars have valid JWT keys:
   echo $JWT_PRIVATE_KEY
   echo $JWT_PUBLIC_KEY
3. If not set, use emergency backup keys (secured separately)
4. Restart backend with fallback keys

RESOLUTION:
1. Restore Vault from backup
2. Verify secrets integrity
3. Update backend to use Vault again
4. Remove fallback env vars

7.2 KEY LOSS
------------

SCENARIO: JWT keys lost or corrupted in Vault

PREVENTION:
- Vault snapshots (daily)
- Offline backup of critical keys
- Multi-region Vault replication

RECOVERY:
1. Restore keys from Vault snapshot
2. If snapshot unavailable, generate new keys:
   pnpm secrets:rotate --force
3. All existing user sessions invalidated (forced re-login)
4. Update JWKS endpoint with new keys
5. Monitor for authentication errors

7.3 BACKUP STRATEGY
-------------------

FREQUENCY: Daily

BACKUP LOCATIONS:
- Vault snapshots (automated)
- Encrypted offline storage (weekly)
- Disaster recovery site (replicated)

BACKUP VERIFICATION:
- Monthly restore test
- Quarterly full DR drill

RETENTION:
- Daily snapshots: 7 days
- Weekly backups: 30 days
- Monthly archives: 12 months

================================================================================
8. TESTING & VALIDATION
================================================================================

8.1 PRE-PRODUCTION TESTING
---------------------------

Before enabling Vault in production:

TEST 1: Vault connectivity
  COMMAND: vault status
  EXPECTED: Sealed: false, Initialized: true

TEST 2: Token validity
  COMMAND: vault token lookup
  EXPECTED: Valid token with correct policies

TEST 3: Secret read
  COMMAND: vault kv get secret/jwt
  EXPECTED: Keys returned successfully

TEST 4: Secret write
  COMMAND: pnpm secrets:rotate --force
  EXPECTED: "[rotate-secrets] Keys rotated successfully"

TEST 5: Backend startup
  COMMAND: VAULT_ENABLED=true npm start
  EXPECTED: "[server] Secrets manager initialized with Vault"

TEST 6: JWKS endpoint
  COMMAND: curl http://localhost:4000/.well-known/jwks.json
  EXPECTED: Valid JWKS with new "kid"

TEST 7: Authentication flow
  COMMAND: Login via API and verify JWT
  EXPECTED: Valid JWT with correct signature

8.2 PRODUCTION VALIDATION
--------------------------

After deploying Vault integration:

VALIDATION 1: Monitor logs for Vault errors (first 24 hours)
VALIDATION 2: Check authentication success rate (should be 100%)
VALIDATION 3: Verify key rotation runs successfully (first scheduled run)
VALIDATION 4: Test failover to env vars (disable Vault temporarily)
VALIDATION 5: Measure secret read latency (should be < 100ms p95)

================================================================================
9. REFERENCE
================================================================================

RELATED DOCUMENTS:
- CLAUDE.md - Repository overview and development guide
- TDD Section 10.6 - Secrets Management architecture
- TDD Section 13.7 - Operational security procedures
- ADR-002 - Authentication Token Strategy
- SECURITY.md - Security policy and key rotation procedures
- .env.example - Environment variable reference

COMMANDS REFERENCE:
- pnpm secrets:rotate           → Check and rotate secrets if needed
- pnpm secrets:rotate --force   → Force immediate rotation
- vault status                  → Check Vault server status
- vault token lookup            → Verify Vault token validity
- vault kv get secret/jwt       → Read JWT keys from Vault
- vault kv put secret/jwt       → Write JWT keys to Vault

SUPPORT CONTACTS:
- Security Team: security@fitvibe.com
- DevOps Team: devops@fitvibe.com
- On-Call: PagerDuty escalation policy "FitVibe Infrastructure"

================================================================================
10. CHANGE LOG
================================================================================

Version 1.0 - 2025-10-28
- Initial protocol document
- I-12 implementation complete
- Vault integration with JWT key rotation
- Automated rotation script with 90-day policy
- Health checks and monitoring procedures
- Disaster recovery procedures
- Testing and validation guidelines

NEXT REVIEW: 2025-11-28 (30 days)

================================================================================
END OF DOCUMENT
================================================================================
